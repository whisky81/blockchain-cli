#!/usr/bin/env node
 
import * as readline from 'node:readline/promises';
import { stdin as input, stdout as output } from 'node:process';
import chalk from 'chalk';
import Blockchain from './Blockchain.js';
import Node from './Node.js';
import * as handler from './handlePrompt.js';

const blockchain = new Blockchain();
const node = new Node(blockchain);

const rl = readline.createInterface({ input, output, prompt: chalk.green('bc> ') });
rl.on('close', async () => {
    try {
        console.log('üö™ Closing...');
        await node.stop();
    } catch (e: any) {
        console.log(chalk.red(e.message || 'Unknow Error'));
    }
});

console.log(`‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£§‚£§‚£§‚£§‚£§‚£∂‚£¶‚£§‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä 
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚°ø‚†õ‚†â‚†ô‚†õ‚†õ‚†õ‚†õ‚†ª‚¢ø‚£ø‚£∑‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä 
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚†à‚¢ª‚£ø‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä 
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚°è‚†Ä‚†Ä‚†Ä‚£†‚£∂‚£æ‚£ø‚£ø‚£ø‚†ø‚†ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£Ñ‚†Ä‚†Ä‚†Ä 
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚†Å‚†Ä‚†Ä‚¢∞‚£ø‚£ø‚£Ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚¢ø‚£∑‚°Ñ‚†Ä 
‚†Ä‚†Ä‚£Ä‚£§‚£¥‚£∂‚£∂‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£∑‚†Ä 
‚†Ä‚¢∞‚£ø‚°ü‚†ã‚†â‚£π‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚£ø‚£ø‚£ø‚£∑‚£¶‚£§‚£§‚£§‚£∂‚£∂‚£∂‚£∂‚£ø‚£ø‚£ø‚†Ä 
‚†Ä‚¢∏‚£ø‚°á‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†É‚†Ä 
‚†Ä‚£∏‚£ø‚°á‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ª‚†ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ø‚†ø‚†õ‚¢ª‚£ø‚°á‚†Ä‚†Ä 
‚†Ä‚£ø‚£ø‚†Å‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ß‚†Ä‚†Ä 
‚†Ä‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚†Ä‚†Ä 
‚†Ä‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚†Ä‚†Ä 
‚†Ä‚¢ø‚£ø‚°Ü‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚°á‚†Ä‚†Ä 
‚†Ä‚†∏‚£ø‚£ß‚°Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚†É‚†Ä‚†Ä 
‚†Ä‚†Ä‚†õ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚£ø‚£ø‚£∑‚£∂‚£∂‚£∂‚£∂‚†∂‚†Ä‚¢†‚£ø‚£ø‚†Ä‚†Ä‚†Ä 
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚£Ω‚£ø‚°è‚†Å‚†Ä‚†Ä‚¢∏‚£ø‚°á‚†Ä‚†Ä‚†Ä 
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚¢π‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚†á‚†Ä‚†Ä‚†Ä 
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£ø‚£¶‚£Ñ‚£Ä‚£†‚£¥‚£ø‚£ø‚†Å‚†Ä‚†à‚†ª‚£ø‚£ø‚£ø‚£ø‚°ø‚†è‚†Ä‚†Ä‚†Ä‚†Ä 
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚†ª‚†ø‚†ø‚†ø‚†ø‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä`)

console.log(chalk.bold.bgBlue.white(' Blockchain CLI '));
console.log(chalk.blue('Version: ') + chalk.green('1.0.0'));
console.log(chalk.yellowBright("‚Ä∫ Type ") + chalk.cyan('.start') + chalk.yellowBright(" to begin."));
console.log(chalk.yellowBright("‚Ä∫ Type ") + chalk.cyan('.help') + chalk.yellowBright(" to view available commands."));

rl.prompt();

for await (const line of rl) {
    // received line
    const rline = line.toLowerCase().trim();

    switch (true) {
        case rline === '.q':
            break;
        case rline === '.start':
            await handler.startPrompt(node);
            break;
        case rline === '.profile':
            await handler.profilePrompt(node);
            break;
        case rline === '.help':
            handler.helpPrompt();
            break;
        case rline === '.peers':
            await handler.peersPrompt(node);
            break;
        case handler.mineRegex.test(rline):
            await handler.minePrompt(node, rline);
            break;
        case handler.chainRegex.test(rline):
            await handler.chainPrompt(node, rline);
            break;
        case handler.blockRegex.test(rline):
            await handler.blockPrompt(node, rline);
            break;
        case handler.logRegex.test(rline):
            await handler.logPrompt(node, rline);
            break;
        default:
            if (rline !== '') {
                console.log(chalk.red('Unknow prompt'));
            }
    }

    if (rline === '.q') {
        break;
    }
    rl.prompt();
}
rl.close();

